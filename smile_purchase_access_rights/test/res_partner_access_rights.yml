- |


  ================================================================================================
                                   Check Access Rights for Module Smile Purchase access Rights
  ================================================================================================
- |

  =========================================================
    Check CRUD partner
  =========================================================
      
- 
  Create a partner
-    
    !python {model: 'res.partner'}: |
        import logging
        LOGGER = logging.getLogger('Test')
        LOGGER.info("==========================================================================================")
        LOGGER.info("-----------------------------------Create Data---------------------------------------------")
        LOGGER.info("==========================================================================================")
        company_id = ref('base.main_company')
        group_read_supplier = ref('smile_purchase_access_rights.group_read_supplier')
        group_user = ref('base.group_user')
        LOGGER.info("===============>1)°-Create a partner")
        partner_id = False
        try:
            partner_id = self.create(cr, uid, {'name':'Supplier','supplier': True}, {})
            LOGGER.info("------->Create partner  Succeed")
        except:
            LOGGER.info("------->Create partner & All tests Failed")

        LOGGER.info("===============>2)°-Create User Read partner")
        user_id = False
        try:
            vals = {
                'company_id': company_id,
                'name': 'Supplier readerc',
                'login': 'supplier_reader@company.com',
                'groups_id' : [(6, 0, [group_read_supplier, group_user])]
            }
            user_id = self.pool.get('res.users').create(cr, uid, vals, {})
            LOGGER.info("------->Create User Read partner  Succeed")
        except:
            LOGGER.info("------->Create User Read partner & All tests Failed")
        LOGGER.info("==========================================================================================")
        LOGGER.info("-----------------------------------Check CRUD---------------------------------------------")
        LOGGER.info("==========================================================================================")
        LOGGER.info("===============>1)°-Create a partner")
        try:
            self.create(cr, user_id, {name:'Supplier'}, {})
            LOGGER.info("------->Create partner  Succeed")
        except:
            LOGGER.info("------->Create partner  Failed")

        LOGGER.info("===============>2)°-Read a partner")
        try:
            self.read(cr, user_id, partner_id, ['name'], {})
            LOGGER.info("------->Read partner  Succeed")
        except:
            LOGGER.info("------->Read partner  Failed")

        LOGGER.info("===============>3)°-Write a partner")
        try:
            self.write(cr, user_id, partner_id, {'name': 'New Supplier'}, {})
            LOGGER.info("------->Write partner  Succeed")
        except:
            LOGGER.info("------->Write partner  Failed")

        LOGGER.info("===============>4)°-Unlink a partner")
        try:
            self.unlink(cr, user_id, partner_id, {})
            LOGGER.info("------->Unlink partner  Succeed")
        except:
            LOGGER.info("------->Unlink partner  Failed")

        LOGGER.info("===============>5)°-Create a Tag")
        try:
            self.pool.get('res.partner.category').create(cr, user_id, {name:'Tag test'}, {})
            LOGGER.info("------->Create Tag  Succeed")
        except:
            LOGGER.info("------->Create Tag  Failed")
