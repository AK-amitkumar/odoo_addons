-
  In order to validate an invoice of a company B on behalf of the main company called in this test A, I first create a company B
-
  !record {model: res.company, id: companyB}:
    name: Company B
-
  I create a fiscal year for the company B
-
  !record {model: account.fiscalyear, id: fiscalyearB}:
    code: !eval "'FY%s'% (datetime.now().year)"
    company_id: companyB
    date_start: !eval "'%s-01-01' %(datetime.now().year)"
    date_stop: !eval "'%s-12-31' %(datetime.now().year)"
    name: !eval "'Fiscal Year %s' %(datetime.now().year)"
-
  I create a general period for the company B
-
  !record {model: account.period, id: periodB}:
    name: !eval "'%s' %(datetime.now().year)"
    date_start: !eval "'%s-01-01'% (datetime.now().year)"
    date_stop: !eval "'%s-12-31'% (datetime.now().year)"
    fiscalyear_id: fiscalyearB
    company_id: companyB
    special: 1
-
  I create an account type
-
  !record {model: account.account.type, id: account_type}:
    name: Test
    code: TEST
-
  I create a receivable account for the company A
-
  !record {model: account.account, id: account_receivableA1}:
    name: Receivable account 1 for company A
    code: A411
    company_id: base.main_company
    type: receivable
    user_type: account_type
-
  I create a receivable account for the company A in the case of billing on behalf of
-
  !record {model: account.account, id: account_receivableA2}:
    name: Receivable account 2 for company A
    code: A412
    company_id: base.main_company
    type: receivable
    user_type: account_type
-
  I create a receivable account for the company B
-
  !record {model: account.account, id: account_receivableB}:
    name: Receivable account for company B
    code: B412
    company_id: companyB
    type: receivable
    user_type: account_type
-
  I create an income account for the main company
-
  !record {model: account.account, id: account_incomeA}:
    name: Income account for company A
    code: A706
    company_id: base.main_company
    type: other
    user_type: account_type
-
  I create a liquidity account for the company B
-
  !record {model: account.account, id: account_liquidityB}:
    name: Liquidity account for the company B
    code: B512
    company_id: companyB
    type: liquidity
    user_type: account_type
-
  I create a sale journal for the company A
-
  !record {model: account.journal, id: journalA1}:
    name: Sale journal for company A
    code: ASJ
    type: sale
    company_id: base.main_company
    view_id: account.account_journal_view
    default_debit_account_id: account_receivableA1
    default_credit_account_id: account_incomeA
-
  I create a second sale journal for the company A for the case of billing on behalf of
-
  !record {model: account.journal, id: journalA2}:
    name: On behalf of journal for company A
    code: ABJ
    type: sale
    company_id: base.main_company
    view_id: account.account_journal_view
    default_debit_account_id: account_receivableA2
    default_credit_account_id: account_incomeA
-
  I create a miscellaneous operation journal for the company B
-
  !record {model: account.journal, id: journalB}:
    name: Miscellaneous operation journal for company B
    code: BMOJ
    type: general
    company_id: companyB
    view_id: account.account_journal_view
    default_debit_account_id: account_receivableB
    default_credit_account_id: account_liquidityB
-
  I configure the billing on behalf of
-
  !record {model: account.invoice.behalf_of, id: behalfBA}:
    company_src_id: base.main_company
    company_dest_id: companyB
    journal_src_id: journalA2
    journal_dest_id: journalB
-
  I create a partner X
-
  !record {model: res.partner, id: partnerX}:
    name: X
-
  I create an invoicing address for the partner X
-
  !record {model: res.partner.address, id: partner_invoice_addressX}:
    name: X
    type: invoice
-
  I create an invoice for the partner X billed by company B on behalf of company A
-
  !record {model: account.invoice, id: invoiceBA}:
    journal_id: journalA1
    currency_id: base.EUR
    partner_id: partnerX
    address_invoice_id: partner_invoice_addressX
    account_id: account_receivableA1
    company_id: base.main_company
    behalf_of_id: behalfBA
-
  I create an invoice line
-
  !record {model: account.invoice.line, id: invoiceBA_line}:
    invoice_id: invoiceBA
    quantity: 1.0
    price_unit: 100.0
    account_id: account_incomeA
    name: Test Invoice Line
-
  I validate this invoice
-
  !workflow {model: account.invoice, action: invoice_open, ref: invoiceBA}
-
  I check if the balances of the previous accounts are equals
-
  !python {model: account.account}: |
    ids = [ref("account_receivableA2"), ref("account_receivableB"), ref("account_liquidityB")]
    for account in self.read(cr, uid, ids, ['name', 'balance']):
      assert abs(account['balance']) == 100.0, 'The balance of the account %s is wrong' % account['name']
 