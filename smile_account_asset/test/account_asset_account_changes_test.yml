-
  I change asset account for the category "Software - 5 Years"
-
  !python {model: account.asset.category}: |
    self.write(cr, uid, ref('account_asset_category_digitalassets'), {
      'asset_account_id': ref('account.xfa'),
    }, context)
-
  I check if accounts transfer after asset account change is effective
-
  !python {model: account.move.line}: |
    old_account_id = ref('account_asset_20')
    new_account_id = ref('account.xfa')
    ids = self.search(cr, uid, [
      ('asset_id', '=', ref("account_asset_asset_digitalasset0")),
      ('account_id', 'in', (old_account_id, new_account_id)),
    ], context=context)
    lines = self.browse(cr, uid, ids, context)
    line_with_new_account = [l for l in lines if l.account_id.id == new_account_id][0]
    assert not sum([l.debit - l.credit for l in lines if l.account_id.id == old_account_id]) \
      and line_with_new_account.debit == line_with_new_account.asset_id.purchase_value, "Accounts Transfer is KO"
-
  I change accounting amortization account for the category "Software - 5 Years"
-
  !python {model: account.asset.category}: |
    self.write(cr, uid, ref('account_asset_category_digitalassets'), {
      'accounting_depreciation_account_id': ref('account.a_expense'),
    }, context)
-
  I check if accounts transfer after amortization expense account change is effective
-
  !python {model: account.move.line}: |
    new_account_id = ref('account.a_expense')
    ids = self.search(cr, uid, [
      ('asset_id', '=', ref("account_asset_asset_digitalasset0")),
      ('account_id', '=', new_account_id),
    ], limit=1, context=context)
    depreciation_value = self.pool.get('account.asset.asset').browse(cr, uid, ref("account_asset_asset_digitalasset0"),
                                                                     context).accounting_depreciation_line_ids[0].depreciation_value
    assert self.browse(cr, uid, ids[0], context).credit == depreciation_value, "Accounts Transfer is KO"
-
  I change fiscal amortization account for the main company
-
  !python {model: res.company}: |
    self.write(cr, uid, ref('base.main_company'), {
      'fiscal_depreciation_account_id': ref('account.a_salary_expense'),
    }, context)
-
  I check if accounts transfer after fiscal depreciation expense account change is effective
-
  !python {model: account.move.line}: |
    new_account_id = ref('account.a_salary_expense')
    ids = self.search(cr, uid, [
      ('asset_id', '=', ref("account_asset_asset_digitalasset0")),
      ('account_id', '=', new_account_id),
    ], limit=1, context=context)
    depreciation_value = self.pool.get('account.asset.asset').browse(cr, uid, ref("account_asset_asset_digitalasset0"),
                                                                     context).fiscal_depreciation_line_ids[0].accelerated_value
    assert self.browse(cr, uid, ids[0], context).credit == depreciation_value, "Accounts Transfer is OK"
